<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://youngyang.top/"/>
  <updated>2019-11-13T15:30:59.492Z</updated>
  <id>https://youngyang.top/</id>
  
  <author>
    <name>youngyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL性能优化之索引优化分析</title>
    <link href="https://youngyang.top/2019/11/13/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E5%88%86%E6%9E%90/"/>
    <id>https://youngyang.top/2019/11/13/MySQL性能优化之索引优化分析/</id>
    <published>2019-11-13T15:24:41.137Z</published>
    <updated>2019-11-13T15:30:59.492Z</updated>
    
    <content type="html"><![CDATA[<p>数据库中索引的重要性毋庸置疑，系统的性能下降可能包含很多原因，其中就包括SQL慢，执行时间长或者等待时间长，其原因包括查询语句写的烂、索引失效、关联太多join（设计缺陷或不得已的需求）、服务器调优及各个参数设置（缓冲\线程数等 ）等原因。其中很大的原因就是索引方面有待优化。<br>本篇文章围绕在开发过程中的索引优化展开描述。</p><a id="more"></a><p>首先在电视剧期间插播几条广告（关于join的一些知识）：<br><img src="https://img-blog.csdnimg.cn/20191108112420209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h1><p><img src="https://img-blog.csdnimg.cn/20191108110701886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>索引也可以简单理解为：排好序的快速查找数据结构</p><p>在数据本身之外,数据库还维护着一个满足特定查找算法的数据结构，这些数据结构以某种方式指向数据，<br>这样就可以在这些数据结构的基础上实现高级查找算法,这种数据结构就是索引。<br><img src="https://img-blog.csdnimg.cn/20191108110803208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以文件形式存储在硬盘上，如windows中在安装目录下的/data/mysql下或者在linux系统中/var/lib/mysql下，有frm、myd和myi等文件，其中myi文件就是表索引文件。</p><p>==我们平时所说的索引，如果没有特别指明，都是指B树(多路搜索树，并不一定是二叉树)结构组织的索引。== 其中聚集索引，次要索引，覆盖索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引，统称索引。当然,除了B+树这种类型的索引之外，还有哈希索引(hash index)等。</p><h1 id="索引的优劣势"><a href="#索引的优劣势" class="headerlink" title="索引的优劣势"></a>索引的优劣势</h1><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>1、类似大学图书馆建书目索引，提高数据检索效率，降低数据库的IO成本。<br>2、通过索引列对数据进行排序，降低数据排序成本，降低了CPU的消耗。</p><h2 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h2><p>1、实际上索引也是一张表，该表保存了主键和索引字段，并指向实体表的记录，所以索引列也是要占用空间的。<br>2、虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表INSERT，UPDATE和DELETE。<br>更新（增删改）表时，MySQL不仅要不存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。<br>3、索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立优秀的索引，或优化查询语句。</p><h1 id="MySQL的索引分类"><a href="#MySQL的索引分类" class="headerlink" title="MySQL的索引分类"></a>MySQL的索引分类</h1><p>1、单值索引：即一个索引只包含单个列，一个表可以有多个单列索引。<br>2、唯一索引：索引列的值必须唯一，但允许有空值。<br>3、复合索引：即一个索引包含多个列。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="1、创建索引："><a href="#1、创建索引：" class="headerlink" title="1、创建索引："></a>1、创建索引：</h2><p>第一种：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE [UNIQUE] <span class="function">INDEX  indexName ON <span class="title">mytable</span><span class="params">(columnname(length))</span></span>;</span><br></pre></td></tr></table></figure><p>如果是CHAR,VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定length。<br>第二种：使用alter添加索引（4种）：<br><img src="https://img-blog.csdnimg.cn/20191108113824837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2、删除索引"><a href="#2、删除索引" class="headerlink" title="2、删除索引"></a>2、删除索引</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX [indexName] ON mytable;</span><br></pre></td></tr></table></figure><h2 id="3、查看索引"><a href="#3、查看索引" class="headerlink" title="3、查看索引"></a>3、查看索引</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEX FROM table_name;</span><br></pre></td></tr></table></figure><h1 id="MySQL的BTree索引结构"><a href="#MySQL的BTree索引结构" class="headerlink" title="MySQL的BTree索引结构"></a>MySQL的BTree索引结构</h1><p><img src="https://img-blog.csdnimg.cn/20191108113942561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191108114200110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="那些情况需要和不要创建索引"><a href="#那些情况需要和不要创建索引" class="headerlink" title="那些情况需要和不要创建索引"></a>那些情况需要和不要创建索引</h1><h2 id="需要"><a href="#需要" class="headerlink" title="需要"></a>需要</h2><p><img src="https://img-blog.csdnimg.cn/20191108114447101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="不要"><a href="#不要" class="headerlink" title="不要"></a>不要</h2><p><img src="https://img-blog.csdnimg.cn/20191108114519703.png" alt="在这里插入图片描述"></p><h1 id="MySQL性能分析"><a href="#MySQL性能分析" class="headerlink" title="MySQL性能分析"></a>MySQL性能分析</h1><p><strong>MySQL Query Optimizer</strong><br><img src="https://img-blog.csdnimg.cn/20191108114731832.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191108115010434.png" alt="在这里插入图片描述"><br>MySQL的性能分析主要包括如下几部分：<br><img src="https://img-blog.csdnimg.cn/20191108115132445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h2><h3 id="慢查询日志是什么"><a href="#慢查询日志是什么" class="headerlink" title="慢查询日志是什么"></a>慢查询日志是什么</h3><p><img src="https://img-blog.csdnimg.cn/2019110811530616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="那我们应该怎么玩慢查询日志呢？"><a href="#那我们应该怎么玩慢查询日志呢？" class="headerlink" title="那我们应该怎么玩慢查询日志呢？"></a>那我们应该怎么玩慢查询日志呢？</h3><h4 id="首先需要开启"><a href="#首先需要开启" class="headerlink" title="首先需要开启"></a>首先需要开启</h4><p><img src="https://img-blog.csdnimg.cn/2019110811540590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>开启命令：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> global slow_query_log = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>那么开启慢查询日志后，什么样的SQL参会记录到慢查询里面？<br><img src="https://img-blog.csdnimg.cn/20191108115519611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="查询并设置慢的阙值时间"><a href="#查询并设置慢的阙值时间" class="headerlink" title="查询并设置慢的阙值时间"></a>查询并设置慢的阙值时间</h4><p><img src="https://img-blog.csdnimg.cn/20191108115943872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>注：</strong>但是设置之后查询long_query_time发现并没有变化，其实已经设置成功了，但是需要重新连接或者新开一个回话才能看到修改值。</p><h4 id="慢查询日志案例："><a href="#慢查询日志案例：" class="headerlink" title="慢查询日志案例："></a>慢查询日志案例：</h4><p><img src="https://img-blog.csdnimg.cn/20191108120651436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="日志分析工具mysqldumpshow"><a href="#日志分析工具mysqldumpshow" class="headerlink" title="日志分析工具mysqldumpshow"></a>日志分析工具mysqldumpshow</h4><p><img src="https://img-blog.csdnimg.cn/20191108120522944.png" alt="在这里插入图片描述"><br>工作中常用参考：<br><img src="https://img-blog.csdnimg.cn/2019110812055433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="使用explain慢SQL分析"><a href="#使用explain慢SQL分析" class="headerlink" title="使用explain慢SQL分析"></a>使用explain慢SQL分析</h2><p>在捕获到查询慢的SQL之后需要对其进行分析，从而完成对SQL的优化。<br>对于explain的介绍、如何使用explain以及各个字段的具体含义在我的另一篇博客中做了详细的介绍，链接：<a href="https://mp.csdn.net/postedit/103010613" target="_blank" rel="noopener">https://mp.csdn.net/postedit/103010613</a>。</p><h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><p>从explain的分析中可以看到索引的使用情况，如何有效的使用到所建立的索引，和如何保证索引不失效十分重要。下面分析索引失效的相关内容：</p><p>1、全值匹配我最爱<br>如：<img src="https://img-blog.csdnimg.cn/20191111171102489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.最佳左前缀法则：如果索引了多例，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。<br><img src="https://img-blog.csdnimg.cn/201911111712291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描。<br><img src="https://img-blog.csdnimg.cn/20191111171253160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.存储引擎不能使用索引中范围条件右边的列<br><img src="https://img-blog.csdnimg.cn/20191111171309488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5.尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致）），减少select*。<br><img src="https://img-blog.csdnimg.cn/20191111171333978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019111117140444.png" alt="在这里插入图片描述"><br>6.mysql在使用不等于（！=或者&lt;&gt;）的时候无法使用索引会导致全表扫描。<br><img src="https://img-blog.csdnimg.cn/20191111171424261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>7.is null,is not null 也无法使用索引。<br><img src="https://img-blog.csdnimg.cn/20191111171442205.png" alt="在这里插入图片描述"><br>8.like以通配符开头（’$abc…’）mysql索引失效会变成全表扫描操作。<br>    问题：解决like’%字符串%’索引不被使用的方法？？<br>    答：<br>    1、可以使用主键索引<br>    2、使用覆盖索引，查询字段必须是建立覆盖索引字段<br>    3、当覆盖索引指向的字段是varchar(380)及380以上的字段时，覆盖索引会失效！</p><p>9.字符串不加单引号索引失效。<br><img src="https://img-blog.csdnimg.cn/20191111171534879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>10.少用or,用它连接时会索引失效。<br><img src="https://img-blog.csdnimg.cn/20191111171616610.png" alt="在这里插入图片描述"><br>11、小总结<br><img src="https://img-blog.csdnimg.cn/20191111171648940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> KK%相当于=常量     %KK和%KK% 相当于范围。<br>  <img src="https://img-blog.csdnimg.cn/20191111171712984.png" alt="KK%相当于=常量     %KK和%KK% 相当于范围"><br>  12、一般性建议：<br><img src="https://img-blog.csdnimg.cn/2019111117175731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库中索引的重要性毋庸置疑，系统的性能下降可能包含很多原因，其中就包括SQL慢，执行时间长或者等待时间长，其原因包括查询语句写的烂、索引失效、关联太多join（设计缺陷或不得已的需求）、服务器调优及各个参数设置（缓冲\线程数等 ）等原因。其中很大的原因就是索引方面有待优化。&lt;br&gt;本篇文章围绕在开发过程中的索引优化展开描述。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://youngyang.top/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://youngyang.top/tags/mysql/"/>
    
      <category term="性能优化" scheme="https://youngyang.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="索引" scheme="https://youngyang.top/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>mysql锁机制</title>
    <link href="https://youngyang.top/2019/11/13/MySQL%E9%94%81%E6%9C%BA%E5%88%B6/"/>
    <id>https://youngyang.top/2019/11/13/MySQL锁机制/</id>
    <published>2019-11-13T15:20:00.514Z</published>
    <updated>2019-11-13T15:30:34.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql锁机制概述"><a href="#mysql锁机制概述" class="headerlink" title="mysql锁机制概述"></a>mysql锁机制概述</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><img src="https://img-blog.csdnimg.cn/20191111174054371.png" alt="在这里插入图片描述"></p><h2 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h2><h3 id="从数据操作的类型（读、写）分："><a href="#从数据操作的类型（读、写）分：" class="headerlink" title="从数据操作的类型（读、写）分："></a>从数据操作的类型（读、写）分：</h3><p>1、读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。<br>2、写锁（排它锁）：当前写操作没有完成前，它会阻断其他写锁和读锁。</p><h3 id="从对数据操作的颗粒度分："><a href="#从对数据操作的颗粒度分：" class="headerlink" title="从对数据操作的颗粒度分："></a>从对数据操作的颗粒度分：</h3><p>从对数据操作的颗粒度分为：表锁和行锁。</p><a id="more"></a><h2 id="三锁分析"><a href="#三锁分析" class="headerlink" title="三锁分析"></a>三锁分析</h2><h3 id="表锁（偏读）"><a href="#表锁（偏读）" class="headerlink" title="表锁（偏读）"></a>表锁（偏读）</h3><p>特点：偏向MyISAM存储引擎，开销小，加锁快，无死锁，锁定粒度大，发生锁冲突的概率最高，并发最低。<br><img src="https://img-blog.csdnimg.cn/20191111183019315.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191111183023542.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191111183243776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191111183255597.png" alt="在这里插入图片描述"><br><strong>表锁分析</strong>：<br><img src="https://img-blog.csdnimg.cn/20191111183547292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191111183614682.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191111183618447.png" alt="在这里插入图片描述"></p><h3 id="行锁（偏写）"><a href="#行锁（偏写）" class="headerlink" title="行锁（偏写）"></a>行锁（偏写）</h3><p>特点：偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。<br>补充：InnoDB与MyISAM的最大不同有两点：一是支持事务（TRANSACTION）;二是采用了行级锁。<br>由于行锁支持事务，复习老知识如下：</p><p>事务（Transation）及其ACID属性：<br><img src="https://img-blog.csdnimg.cn/20191111183747833.png" alt="在这里插入图片描述"><br>并发事务处理带来的问题：<br><strong>更新丢失</strong>：<br><img src="https://img-blog.csdnimg.cn/20191111183834775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>脏读</strong>：<br><img src="https://img-blog.csdnimg.cn/20191111184004509.png" alt="在这里插入图片描述"><br><strong>不可重复读</strong>：<br><img src="https://img-blog.csdnimg.cn/20191111184027722.png" alt="在这里插入图片描述"><br><strong>幻读</strong>：<br><img src="https://img-blog.csdnimg.cn/20191111184046371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>事务隔离级别</strong>：<br><img src="https://img-blog.csdnimg.cn/20191111184108781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>常见问题<strong>如何锁定一行</strong>：<br><img src="https://img-blog.csdnimg.cn/20191111184154913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191111184310177.png" alt="在这里插入图片描述"><br><strong>行锁分析</strong>：<br><img src="https://img-blog.csdnimg.cn/20191111184335255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191111184349397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>优化建议：<br><img src="https://img-blog.csdnimg.cn/20191111184429843.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mysql锁机制概述&quot;&gt;&lt;a href=&quot;#mysql锁机制概述&quot; class=&quot;headerlink&quot; title=&quot;mysql锁机制概述&quot;&gt;&lt;/a&gt;mysql锁机制概述&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191111174054371.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;锁的分类&quot;&gt;&lt;a href=&quot;#锁的分类&quot; class=&quot;headerlink&quot; title=&quot;锁的分类&quot;&gt;&lt;/a&gt;锁的分类&lt;/h2&gt;&lt;h3 id=&quot;从数据操作的类型（读、写）分：&quot;&gt;&lt;a href=&quot;#从数据操作的类型（读、写）分：&quot; class=&quot;headerlink&quot; title=&quot;从数据操作的类型（读、写）分：&quot;&gt;&lt;/a&gt;从数据操作的类型（读、写）分：&lt;/h3&gt;&lt;p&gt;1、读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。&lt;br&gt;2、写锁（排它锁）：当前写操作没有完成前，它会阻断其他写锁和读锁。&lt;/p&gt;
&lt;h3 id=&quot;从对数据操作的颗粒度分：&quot;&gt;&lt;a href=&quot;#从对数据操作的颗粒度分：&quot; class=&quot;headerlink&quot; title=&quot;从对数据操作的颗粒度分：&quot;&gt;&lt;/a&gt;从对数据操作的颗粒度分：&lt;/h3&gt;&lt;p&gt;从对数据操作的颗粒度分为：表锁和行锁。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://youngyang.top/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://youngyang.top/tags/mysql/"/>
    
      <category term="锁" scheme="https://youngyang.top/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>MySQL性能优化之explain</title>
    <link href="https://youngyang.top/2019/07/17/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bexplain/"/>
    <id>https://youngyang.top/2019/07/17/MySQL性能优化之explain/</id>
    <published>2019-07-17T09:43:54.000Z</published>
    <updated>2019-11-13T15:36:16.390Z</updated>
    
    <content type="html"><![CDATA[<p>在日常工作中，我们会有时会开慢查询去记录一些执行时间比较久的SQL语句，找出这些SQL语句并不意味着完事了，些时我们常常用到explain这个命令来查看一个这些SQL语句的执行计划，查看该SQL语句有没有使用上索引，有没有做全表扫描，这都可以通过explain命令来查看。所以我们深入了解MySQL的基于开销的优化器，还可以获得很多可能被优化器考虑到的访问策略的细节，以及当运行SQL语句时哪种策略预计会被优化器采用。</p><a id="more"></a><h1 id="explain是什么"><a href="#explain是什么" class="headerlink" title="explain是什么"></a>explain是什么</h1><p>使用EXPLAIN关键字可以模拟优化器执行SQL语句，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或是结构的性能瓶颈。</p><h1 id="explain能干什么"><a href="#explain能干什么" class="headerlink" title="explain能干什么"></a>explain能干什么</h1><p><img src="https://img-blog.csdnimg.cn/20191108121101440.png" alt="在这里插入图片描述"></p><h1 id="explain怎么玩"><a href="#explain怎么玩" class="headerlink" title="explain怎么玩"></a>explain怎么玩</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain + SQL语句</span><br></pre></td></tr></table></figure><p>包含的信息：<br><img src="https://img-blog.csdnimg.cn/20191108121336390.png" alt="在这里插入图片描述"><br>①id：select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序<br><img src="https://img-blog.csdnimg.cn/20191108121709276.png" alt="在这里插入图片描述"><br>②select_type：查询的类型，主要用于区别普通查询、联合查询、子查询等的复杂查询<br>select_type种类：<br><img src="https://img-blog.csdnimg.cn/20191108121742190.png" alt="在这里插入图片描述"><br>select_type各字段代表的含义：<br><img src="https://img-blog.csdnimg.cn/20191108121936141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>③table：显示这一行的数据是关于哪张表的。<br>④type种类（重要）：显示查询使用了何种类型，从最好到最差依次是：system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL<br><img src="https://img-blog.csdnimg.cn/20191111151347727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>⑤possible_keys：显示可能应用在这张表中的索引,一个或多个。查询涉及的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用。<br>⑥key（重要）：实际使用的索引。如果为null则没有使用索引。（查询中若使用了覆盖索引，则索引和查询的select字段重叠，在Extra中显示Using index）<br>⑦key_len：表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好。（key_len显示的值为索引最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）<br>⑧ref：显示索引哪一列被使用了，如果可能的话，是一个常数。那些列或常量被用于查找索引列上的值<br>⑨rows：根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数。<br>⑩Extra（重要）：包含不适合在其他列中显示但十分重要的额外信息。<br><img src="https://img-blog.csdnimg.cn/20191111152036632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在日常工作中，我们会有时会开慢查询去记录一些执行时间比较久的SQL语句，找出这些SQL语句并不意味着完事了，些时我们常常用到explain这个命令来查看一个这些SQL语句的执行计划，查看该SQL语句有没有使用上索引，有没有做全表扫描，这都可以通过explain命令来查看。所以我们深入了解MySQL的基于开销的优化器，还可以获得很多可能被优化器考虑到的访问策略的细节，以及当运行SQL语句时哪种策略预计会被优化器采用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://youngyang.top/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://youngyang.top/tags/mysql/"/>
    
      <category term="性能优化" scheme="https://youngyang.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="explain" scheme="https://youngyang.top/tags/explain/"/>
    
  </entry>
  
  <entry>
    <title>MySQL性能优化之查询截取分析</title>
    <link href="https://youngyang.top/2019/07/17/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%88%AA%E5%8F%96%E5%88%86%E6%9E%90/"/>
    <id>https://youngyang.top/2019/07/17/MySQL性能优化之查询截取分析/</id>
    <published>2019-07-17T09:22:45.000Z</published>
    <updated>2019-11-13T15:36:44.175Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL在查询数据的时候需要对响应的SQL语句进行优化，以提高速度和效率。</p><a id="more"></a><h1 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h1><h2 id="永远小表驱动大表"><a href="#永远小表驱动大表" class="headerlink" title="永远小表驱动大表"></a>永远小表驱动大表</h2><p>案例：<br><img src="https://img-blog.csdnimg.cn/2019111117225492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191111172305469.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191111172310517.png" alt="在这里插入图片描述"></p><h2 id="order-by关键字优化"><a href="#order-by关键字优化" class="headerlink" title="order by关键字优化"></a>order by关键字优化</h2><p>1、ORDER BY子句，尽量使用Index方式排序，避免使用FileSort方式排序。<br>2、尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀。<br>3、如果不在索引列上，filesort有两种算法：mysql就要启动双路排序和单路排序。</p><p><strong>双路排序</strong>：MySQL4.1之前是使用双路排序，字面意思是两次扫描磁盘，最终得到数据。读取行指针和orderby列，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据传输。</p><p>取一批数据，要对磁盘进行两次扫描，众所周知，I\O是很耗时的，所以在mysql4.1之后，出现了第二张改进的算法，就是单路排序。<br><strong>单路排序</strong>：从磁盘读取查询需要的所有列，按照orderby列在buffer对它们进行排序，然后扫描排序后的列表进行输出，<br>它的效率更快一些，避免了第二次读取数据，并且把随机IO变成顺序IO，但是它会使用更多的空间，因为它把每一行都保存在内存中了。<br><strong>结论及引申出的问题</strong>：由于单路是后出来的，总体而言好过双路。但是用单路有问题：<br><img src="https://img-blog.csdnimg.cn/2019111117281881.png" alt="在这里插入图片描述"><br>优化策略：1、增大sort_buffer_size参数的设置。2、增大max_length_for_sort_data参数的设置。<br><img src="https://img-blog.csdnimg.cn/20191111172857472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>小总结：<br><img src="https://img-blog.csdnimg.cn/20191111172919262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="GROUP-BY关键字优化"><a href="#GROUP-BY关键字优化" class="headerlink" title="GROUP BY关键字优化"></a>GROUP BY关键字优化</h2><p>group by的优化和order by的优化有很多相似之处：<br>1、group by实质是先排序后进行分组，遵照索引建的最佳左前缀。<br>2、当无法使用索引列，增大max_length_for_sort_data参数的设置+增大sort_buffer_size参数的设置。<br>3、where高于having,能写在where限定的条件就不要去having限定了。</p><h1 id="show-profile"><a href="#show-profile" class="headerlink" title="show profile"></a>show profile</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>show profile：是mysql提供可以用来分析当前会话中语句执行的资源消耗情况，可以用于SQL的调优测量。<br>默认情况下，参数处于关闭状态，并保存最近15次的运行结果。</p><h2 id="使用及分析步骤"><a href="#使用及分析步骤" class="headerlink" title="使用及分析步骤"></a>使用及分析步骤</h2><h3 id="1-是否支持，看看当前的SQL版本是否支持"><a href="#1-是否支持，看看当前的SQL版本是否支持" class="headerlink" title="1.是否支持，看看当前的SQL版本是否支持"></a>1.是否支持，看看当前的SQL版本是否支持</h3><p><img src="https://img-blog.csdnimg.cn/20191111173318258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-开启功能，默认是关闭，使用前需要开启"><a href="#2-开启功能，默认是关闭，使用前需要开启" class="headerlink" title="2.开启功能，默认是关闭，使用前需要开启"></a>2.开启功能，默认是关闭，使用前需要开启</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> profiling = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="3-运行SQL"><a href="#3-运行SQL" class="headerlink" title="3.运行SQL"></a>3.运行SQL</h3><p>如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user;</span><br></pre></td></tr></table></figure><h3 id="4-查看结果"><a href="#4-查看结果" class="headerlink" title="4.查看结果"></a>4.查看结果</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show profiles;</span><br></pre></td></tr></table></figure><h3 id="5-诊断SQL"><a href="#5-诊断SQL" class="headerlink" title="5.诊断SQL"></a>5.诊断SQL</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show profile cpu,block io <span class="keyword">for</span> query 上一步前面的问题SQL 数字号码；</span><br></pre></td></tr></table></figure><h3 id="6-日常开发需要注意的结论"><a href="#6-日常开发需要注意的结论" class="headerlink" title="6.日常开发需要注意的结论"></a>6.日常开发需要注意的结论</h3><p>1、converting HEAP to MyISAM：查询结果太大，内存都不够用了往磁盘上搬了。<br>2、Creating tmp table：创建临时表。<br>    会先拷贝数据到临时表，用完再删除。如：<br><img src="https://img-blog.csdnimg.cn/20191111173758860.png" alt="在这里插入图片描述"><br>3、Copying to tmp table on disk 把内存中临时表复制到磁盘，危险！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL在查询数据的时候需要对响应的SQL语句进行优化，以提高速度和效率。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://youngyang.top/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://youngyang.top/tags/mysql/"/>
    
      <category term="性能优化" scheme="https://youngyang.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>MySQL逻辑架构</title>
    <link href="https://youngyang.top/2019/07/13/MySQL%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/"/>
    <id>https://youngyang.top/2019/07/13/MySQL逻辑架构/</id>
    <published>2019-07-13T01:23:22.000Z</published>
    <updated>2019-11-13T15:35:40.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL总体概览"><a href="#MySQL总体概览" class="headerlink" title="MySQL总体概览"></a>MySQL总体概览</h1><p><img src="https://img-blog.csdnimg.cn/20191108103653857.png" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20191108103640296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20191108105813554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong><img src="https://img-blog.csdnimg.cn/20191108105833580.png" alt="加粗样式"></strong><br><strong>了解：</strong><br>1.Connectors<br>指的是不同语言中与SQL的交互<br>2 Management Serveices &amp; Utilities：<br>系统管理和控制工具<br>3 Connection Pool: 连接池<br>管理缓冲用户连接，线程处理等需要缓存的需求。<br>负责监听对 MySQL Server 的各种请求，接收连接请求，转发所有连接请求到线程管理模块。每一个连接上 MySQL Server 的客户端请求都会被分配（或创建）一个连接线程为其单独服务。而连接线程的主要工作就是负责 MySQL Server 与客户端的通信，<br>接受客户端的命令请求，传递 Server 端的结果信息等。线程管理模块则负责管理维护这些连接线程。包括线程的创建，线程的 cache 等。<br>4 SQL Interface: SQL接口。<br>接受用户的SQL命令，并且返回用户需要查询的结果。比如select from就是调用SQL Interface<br>5 Parser: 解析器。<br>SQL命令传递到解析器的时候会被解析器验证和解析。解析器是由Lex和YACC实现的，是一个很长的脚本。<br>在 MySQL中我们习惯将所有 Client 端发送给 Server 端的命令都称为 query ，在 MySQL Server 里面，连接线程接收到客户端的一个 Query 后，会直接将该 query 传递给专门负责将各种 Query 进行分类然后转发给各个对应的处理模块。<br>主要功能：<br>a . 将SQL语句进行语义和语法的分析，分解成数据结构，然后按照不同的操作类型进行分类，然后做出针对性的转发到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。<br>b.  如果在分解构成中遇到错误，那么就说明这个sql语句是不合理的<br>6 Optimizer: 查询优化器。<br>SQL语句在查询之前会使用查询优化器对查询进行优化。就是优化客户端请求的 query（sql语句） ，根据客户端请求的 query 语句，和数据库中的一些统计信息，在一系列算法的基础上进行分析，得出一个最优的策略，告诉后面的程序如何取得这个 query 语句的结果<br>他使用的是“选取-投影-联接”策略进行查询。<br>       用一个例子就可以理解： select uid,name from user where gender = 1;<br>       这个select 查询先根据where 语句进行选取，而不是先将表全部查询出来以后再进行gender过滤<br>       这个select查询先根据uid和name进行属性投影，而不是将属性全部取出以后再进行过滤<br>       将这两个查询条件联接起来生成最终查询结果<br>7 Cache和Buffer： 查询缓存。<br>他的主要功能是将客户端提交 给MySQL 的 Select 类 query 请求的返回结果集 cache 到内存中，与该 query 的一个 hash 值 做一个对应。该 Query 所取数据的基表发生任何数据的变化之后， MySQL 会自动使该 query 的Cache 失效。在读写比例非常高的应用系统中， Query Cache 对性能的提高是非常显著的。当然它对内存的消耗也是非常大的。<br>如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等<br>8 、存储引擎接口<br>存储引擎接口模块可以说是 MySQL 数据库中最有特色的一点了。目前各种数据库产品中，基本上只有 MySQL 可以实现其底层数据存储引擎的插件式管理。这个模块实际上只是 一个抽象类，但正是因为它成功地将各种数据处理高度抽象化，才成就了今天 MySQL 可插拔存储引擎的特色。<br>     从图2还可以看出，MySQL区别于其他数据库的最重要的特点就是其插件式的表存储引擎。MySQL插件式的存储引擎架构提供了一系列标准的管理和服务支持，这些标准与存储引擎本身无关，可能是每个数据库系统本身都必需的，如SQL分析器和优化器等，而存储引擎是底层物理结构的实现，每个存储引擎开发者都可以按照自己的意愿来进行开发。<br>    注意：存储引擎是基于表的，而不是数据库。</p><h1 id="MySQL存储引擎"><a href="#MySQL存储引擎" class="headerlink" title="MySQL存储引擎"></a>MySQL存储引擎</h1><h2 id="查看提供的引擎"><a href="#查看提供的引擎" class="headerlink" title="查看提供的引擎"></a>查看提供的引擎</h2><p><img src="https://img-blog.csdnimg.cn/20191108110055368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="查看自己的MySQL已提供什么存储引擎"></p><h2 id="MyISAM和InnoDB对比"><a href="#MyISAM和InnoDB对比" class="headerlink" title="MyISAM和InnoDB对比"></a>MyISAM和InnoDB对比</h2><p> <img src="https://img-blog.csdnimg.cn/20191108110246628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL总体概览&quot;&gt;&lt;a href=&quot;#MySQL总体概览&quot; class=&quot;headerlink&quot; title=&quot;MySQL总体概览&quot;&gt;&lt;/a&gt;MySQL总体概览&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191108103653857.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;)&lt;img src=&quot;https://img-blog.csdnimg.cn/20191108103640296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://youngyang.top/categories/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>Your password does not satisfy the current policy requirements</title>
    <link href="https://youngyang.top/2019/04/22/ERROR%201819%20(HY000)_%20Your%20password%20does%20not%20satisfy%20the%20current%20policy%20requirements/"/>
    <id>https://youngyang.top/2019/04/22/ERROR 1819 (HY000)_ Your password does not satisfy the current policy requirements/</id>
    <published>2019-04-22T06:47:40.000Z</published>
    <updated>2019-10-31T04:34:42.958Z</updated>
    
    <content type="html"><![CDATA[<p>在linux中部署项目，搭建数据库环境的时候，需要专门设置一个user来管理响应的数据库。这是我在初步使用mysql，向mysql中user表插入用户时遇到的问题。</p><a id="more"></a><p>密码策略问题异常信息：<br>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</p><p>如下图：<img src="https://img-blog.csdnimg.cn/20191024103619380.png" alt="在这里插入图片描述"><br>解决办法：</p><h4 id="1、查看-mysql-初始的密码策略，"><a href="#1、查看-mysql-初始的密码策略，" class="headerlink" title="1、查看 mysql 初始的密码策略，"></a>1、查看 mysql 初始的密码策略，</h4><p>输入语句 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE <span class="string">'validate_password%'</span>;</span><br></pre></td></tr></table></figure><p>进行查看，<br>如下图：<br><img src="https://img-blog.csdnimg.cn/20191024103903746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2、首先需要设置密码的验证强度等级"><a href="#2、首先需要设置密码的验证强度等级" class="headerlink" title="2、首先需要设置密码的验证强度等级"></a>2、首先需要设置密码的验证强度等级</h4><p>设置 validate_password_policy 的全局参数为 LOW 即可，输入设值语句 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> global validate_password_policy=LOW;</span><br></pre></td></tr></table></figure><p>进行设值，如下图：<img src="https://img-blog.csdnimg.cn/20191024104114414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="3、设置密码长度"><a href="#3、设置密码长度" class="headerlink" title="3、设置密码长度"></a>3、设置密码长度</h4><p>当前密码长度为 8 ，如果不介意的话就不用修改了，此处设置为 4 位的密码，设置 validate_password_length 的全局参数为 6 即可，<br>输入设值语句<br><code>set global validate_password_length=4;</code>进行设值，如下图：<br><img src="https://img-blog.csdnimg.cn/20191024104332805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="4-设置密码"><a href="#4-设置密码" class="headerlink" title="4.设置密码"></a>4.设置密码</h4><p>现在就可以为mysql的用户设置密码了，只要满足4位长度即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user <span class="string">'mmall'</span>@<span class="string">'localhost'</span> identified by <span class="string">'mmall'</span>;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://img-blog.csdnimg.cn/20191024105338293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>至此，用户就添加成功了！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在linux中部署项目，搭建数据库环境的时候，需要专门设置一个user来管理响应的数据库。这是我在初步使用mysql，向mysql中user表插入用户时遇到的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://youngyang.top/categories/linux/"/>
    
      <category term="mysql" scheme="https://youngyang.top/categories/linux/mysql/"/>
    
    
      <category term="linux" scheme="https://youngyang.top/tags/linux/"/>
    
      <category term="mysql" scheme="https://youngyang.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>一文读懂Java 代码块和代码执行顺序</title>
    <link href="https://youngyang.top/2019/04/22/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82Java%20%E4%BB%A3%E7%A0%81%E5%9D%97%E5%92%8C%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>https://youngyang.top/2019/04/22/一文读懂Java 代码块和代码执行顺序/</id>
    <published>2019-04-22T06:47:40.000Z</published>
    <updated>2019-10-31T04:33:16.831Z</updated>
    
    <content type="html"><![CDATA[<p>这是我在一个公众号上看到的关于java基础的一些内容，我觉得对于java基础掌握不牢固的小伙伴的帮助应该会很大，所以搬运过来供大家学习交流。</p><a id="more"></a><p><strong>原创公众号:java技术江湖</strong></p><h1 id="Java中的构造方法"><a href="#Java中的构造方法" class="headerlink" title="Java中的构造方法"></a>Java中的构造方法</h1><h4 id="构造方法简介"><a href="#构造方法简介" class="headerlink" title="构造方法简介"></a>构造方法简介</h4><p>构造方法是类的一种特殊方法，用来初始化类的一个新的对象。Java 中的每个类都有一个默认的构造方法，它必须具有和类名相同的名称，而且没有返回类型。构造方法的默认返回类型就是对象类型本身，并且构造方法不能被 static、final、synchronized、abstract 和 native 修饰。</p><p>提示：构造方法用于初始化一个新对象，所以用 static 修饰没有意义；构造方法不能被子类继承，所以用 final 和 abstract 修饰没有意义；多个线程不会同时创建内存地址相同的同一个对象，所以用 synchronized 修饰没有必要。</p><p>构造方法的语法格式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_name</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">class_name</span><span class="params">()</span></span>&#123;&#125;    <span class="comment">//默认无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ciass_name</span><span class="params">([paramList])</span></span>&#123;&#125;    <span class="comment">//定义构造方法</span></span><br><span class="line">    …</span><br><span class="line">    <span class="comment">//类主体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一个类中，与类名相同的方法就是构造方法。每个类可以具有多个构造方法，但要求它们各自包含不同的方法参数。</p><h4 id="构造方法实例"><a href="#构造方法实例" class="headerlink" title="构造方法实例"></a>构造方法实例</h4><p><strong>例 1</strong><br>构造方法主要有无参构造方法和有参构造方法两种，示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m;    <span class="comment">//定义私有变量</span></span><br><span class="line">    MyClass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//定义无参的构造方法</span></span><br><span class="line">        m=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    MyCiass(<span class="keyword">int</span> m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//定义有参的构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.m=m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该示例定义了两个构造方法，分别是无参构造方法和有参构造方法。在一个类中定义多个具有不同参数的同名方法，这就是方法的重载。这两个构造方法的名称都与类名相同，均为 MyClass。在实例化该类时可以调用不同的构造方法进行初始化。</p><p>注意：类的构造方法不是要求必须定义的。如果在类中没有定义任何一个构造方法，则 Java 会自动为该类生成一个默认的构造方法。默认的构造方法不包含任何参数，并且方法体为空。如果类中显式地定义了一个或多个构造方法，则 Java 不再提供默认构造方法。</p><p><strong>例 2</strong><br>要在不同的条件下使用不同的初始化行为创建类的对象，这时候就需要在一个类中创建多个构造方法。下面通过一个示例来演示构造方法的使用。</p><p>(1) 首先在员工类 Worker 中定义两个构造方法，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span> String name;    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;    <span class="comment">//年龄</span></span><br><span class="line">    <span class="comment">//定义带有一个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义带有两个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span><span class="string">"大家好！我是新来的员工，我叫"</span>+name+<span class="string">"，今年"</span>+age+<span class="string">"岁。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Worker 类中定义了两个属性，其中 name 属性不可改变。分别定义了带有一个参数和带有两个参数的构造方法，并对其属性进行初始化。最后定义了该类的 toString() 方法，返回一条新进员工的介绍语句。</p><p>提示：Object 类具有一个 toString() 方法，该方法是个特殊的方法，创建的每个类都会继承该方法，它返回一个 String 类型的字符串。如果一个类中定义了该方法，则在调用该类对象时，将会自动调用该类对象的 toString() 方法返回一个字符串，然后使用“System.out.println(对象名)”就可以将返回的字符串内容打印出来。</p><p>(2) 在 TestWorker 类中创建 main() 方法作为程序的入口处，在 main() 方法中调用不同的构造方法实例化 Worker 对象，并对该对象中的属性进行初始化，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWorker</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----------带有一个参数的构造方法-----------"</span>);</span><br><span class="line">        <span class="comment">//调用带有一个参数的构造方法，Staff类中的sex和age属性值不变</span></span><br><span class="line">        Worker worker1=<span class="keyword">new</span> Worker(<span class="string">"张强"</span>);</span><br><span class="line">        System.out.println(worker1);</span><br><span class="line">        System.out.println(<span class="string">"-----------带有两个参数的构造方法------------"</span>);</span><br><span class="line">        <span class="comment">//调用带有两个参数的构造方法，Staff类中的sex属性值不变</span></span><br><span class="line">        Worker worker2=<span class="keyword">new</span> Worker(<span class="string">"李丽"</span>,<span class="number">25</span>);</span><br><span class="line">        System.out.println(worker2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，创建了两个不同的 Worker 对象：一个是姓名为张强的员工对象，一个是姓名为李丽、年龄为 25 的员工对象。对于第一个 Worker 对象 Worker1，并未指定 age 属性值，因此程序会将其值采用默认值 0。对于第二个 Worker 对象 Worker2，分别对其指定了 name 属性值和 age 属性值，因此程序会将传递的参数值重新赋值给 Worker 类中的属性值。</p><p>运行 TestWorker 类，输出的结果如下：</p><p>———–带有一个参数的构造方法———–<br>大家好！我是新来的员工，我叫张强，今年0岁。<br>———–带有两个参数的构造方法————<br>大家好！我是新来的员工，我叫李丽，今年25岁。</p><p>通过调用带参数的构造方法，在创建对象时，一并完成了对象成员的初始化工作，简化了对象初始化的代码。</p><h1 id="Java中的几种构造方法详解"><a href="#Java中的几种构造方法详解" class="headerlink" title="Java中的几种构造方法详解"></a>Java中的几种构造方法详解</h1><h4 id="普通构造方法"><a href="#普通构造方法" class="headerlink" title="普通构造方法"></a>普通构造方法</h4><p>方法名与类名相同</p><p>无返回类型</p><p>子类不能继承父类的构造方法</p><p>不能被static、final、abstract修饰（有final和static修饰的是不能被子类继承的，abstract修饰的是抽象类，抽象类是不能实例化的，也就是不能new）</p><p>可以被private修饰，可以在本类里面实例化，但是外部不能实例化对象（注意！！！）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class A&#123;</span><br><span class="line">    int i=0;</span><br><span class="line">    public <span class="function"><span class="title">A</span></span>()&#123;</span><br><span class="line">        i=2;</span><br><span class="line">    &#125;</span><br><span class="line">    public A(int i)&#123;</span><br><span class="line">        this.i=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="默认构造方法"><a href="#默认构造方法" class="headerlink" title="默认构造方法"></a>默认构造方法</h4><p>如果没有任何的构造方法，编译时系统会自动添加一个默认无参构造方法</p><p>隐含的默认构造方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>显示的默认构造方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"显示的默认构造方法"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="重载构造方法"><a href="#重载构造方法" class="headerlink" title="重载构造方法"></a>重载构造方法</h4><p>比如原本的类里的构造方法是一个参数的，现在新建的对象是有三个参数，此时就要重载构造方法</p><p>当一个类中有多个构造方法，有可能会出现重复性操作，这时可以用this语句调用其他的构造方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> age,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(age,<span class="string">"无名氏"</span>);<span class="comment">//调用 A(int age,String name)构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1</span>);<span class="comment">//调用 A(int age)构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;<span class="keyword">this</span>.name=name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;<span class="keyword">this</span>.age=age;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> age;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A a=<span class="keyword">new</span> A(<span class="number">20</span>,<span class="string">"周一"</span>);</span><br><span class="line">A b=<span class="keyword">new</span> A(<span class="number">20</span>);</span><br><span class="line">A c=<span class="keyword">new</span> A();</span><br><span class="line">String name = a.getName();</span><br><span class="line">String name1 = b.getName();</span><br><span class="line"><span class="keyword">int</span> age = c.getAge();</span><br><span class="line">System.out.println(name);</span><br><span class="line">System.out.println(name1);</span><br><span class="line">System.out.println(age);</span><br></pre></td></tr></table></figure><h4 id="java子类构造方法调用父类构造方法"><a href="#java子类构造方法调用父类构造方法" class="headerlink" title="java子类构造方法调用父类构造方法"></a>java子类构造方法调用父类构造方法</h4><p>首先父类构造方法是绝对不能被子类继承的。</p><p>子类构造方法调用父类的构造方法重点是：子类构造方法无论如何都要调用父类的构造方法。</p><p>子类构造方法要么调用父类无参构造方法（包括当父类没有构造方法时。系统默认给的无参构造方法），要么调用父类有参构造方法。当子类构造方法调用父类无参构造方法，一般都是默认不写的，要写的话就是super（），且要放在构造方法的第一句。当子类构造方法要调用父类有参数的构造方法，那么子类的构造方法中必须要用super（参数）调用父类构造方法，且要放在构造方法的第一句。</p><p>当子类的构造方法是无参构造方法时，必须调用父类无参构造方法。因为系统会自动找父类有没有无参构造方法，如果没有的话系统会报错：说父类没有定义无参构造方法。</p><p>当子类构造方法是有参构造方法时，这时就会有两种情况。第一种：子类构造方法没有写super，也就是说你默认调用父类无参构造方法，这样的话就和子类是无参构造方法一样。</p><p>第二种：子类构造方法有super（参数）时，就是调用父类有参构造方法，系统会找父类有没有参数一致（参数数量，且类型顺序要相同）的有参构造方法，如果没有的话，同样也会报错。</p><p>但是这里会遇到和重载构造方法this一样问题，一个参数的构造方法可以调用多个参数构造方法，没有的参数给一个自己定义值也是可以的。</p><h1 id="Java中的代码块简介"><a href="#Java中的代码块简介" class="headerlink" title="Java中的代码块简介"></a>Java中的代码块简介</h1><p>在java中用{}括起来的称为代码块，代码块可分为以下四种：</p><h3 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h3><h6 id="1-普通代码块："><a href="#1-普通代码块：" class="headerlink" title="1.普通代码块："></a>1.普通代码块：</h6><p>类中方法的方法体</p><h6 id="2-构造代码块："><a href="#2-构造代码块：" class="headerlink" title="2.构造代码块："></a>2.构造代码块：</h6><p>构造块会在创建对象时被调用，每次创建时都会被调用，优先于类构造函数执行。</p><h6 id="3-静态代码块："><a href="#3-静态代码块：" class="headerlink" title="3.静态代码块："></a>3.静态代码块：</h6><p>用static{}包裹起来的代码片段，只会执行一次。静态代码块优先于构造块执行。</p><h6 id="4-同步代码块："><a href="#4-同步代码块：" class="headerlink" title="4.同步代码块："></a>4.同步代码块：</h6><p>使用synchronized（）{}包裹起来的代码块，在多线程环境下，对共享数据的读写操作是需要互斥进行的，否则会导致数据的不一致性。同步代码块需要写在方法中。</p><h6 id="二-静态代码块和构造代码块的异同点"><a href="#二-静态代码块和构造代码块的异同点" class="headerlink" title="二.静态代码块和构造代码块的异同点"></a>二.静态代码块和构造代码块的异同点</h6><p>相同点：都是JVM加载类后且在构造函数执行之前执行，在类中可定义多个，一般在代码块中对一些static变量进行赋值。</p><p>不同点：静态代码块在非静态代码块之前执行。静态代码块只在第一次new时执行一次，之后不在执行。而非静态代码块每new一次就执行一次。</p><h4 id="Java代码块使用"><a href="#Java代码块使用" class="headerlink" title="Java代码块使用"></a>Java代码块使用</h4><h6 id="局部代码块"><a href="#局部代码块" class="headerlink" title="局部代码块"></a>局部代码块</h6><p>位置：局部位置（方法内部）<br>作用：限定变量的生命周期，尽早释放，节约内存<br>调用：调用其所在的方法时执行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 局部代码块 &#123;</span></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    B b = <span class="keyword">new</span> B();</span><br><span class="line">    b.go();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line">    B()&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方法中的局部代码块，一般进行一次性地调用，调用完立刻释放空间，避免在接下来的调用过程中占用栈空间</span></span><br><span class="line">        <span class="comment">//因为栈空间内存是有限的，方法调用可能会会生成很多局部变量导致栈内存不足。</span></span><br><span class="line">        <span class="comment">//使用局部代码块可以避免这样的情况发生。</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">            ArrayList&lt;Integer&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (i &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">                <span class="built_in">list</span>.add(i ++);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Integer j : <span class="built_in">list</span>) &#123;</span><br><span class="line">                System.out.println(j);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"gogogo"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h6><p>位置：类成员的位置，就是类中方法之外的位置<br>作用：把多个构造方法共同的部分提取出来，共用构造代码块<br>调用：每次调用构造方法时，都会优先于构造方法执行，也就是每次new一个对象时自动调用，对 对象的初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> initValue;<span class="comment">//成员变量的初始化交给代码块来完成</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//代码块的作用体现于此：在调用构造方法之前，用某段代码对成员变量进行初始化。</span></span><br><span class="line">        <span class="comment">//而不是在构造方法调用时再进行。一般用于将构造方法的相同部分提取出来。</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i ++) &#123;</span><br><span class="line">            initValue += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(initValue);</span><br><span class="line">        System.out.println(i);<span class="comment">//此时会打印1</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span>;<span class="comment">//代码块里的变量和成员变量不冲突，但会优先使用代码块的变量</span></span><br><span class="line">        System.out.println(i);<span class="comment">//此时打印2</span></span><br><span class="line">        <span class="comment">//System.out.println(j);//提示非法向后引用，因为此时j的的初始化还没开始。</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"代码块运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">2</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(j);</span><br><span class="line">        System.out.println(i);<span class="comment">//代码块中的变量运行后自动释放，不会影响代码块之外的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    A()&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造方法运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 构造代码块 &#123;</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h6><p>位置：类成员位置，用static修饰的代码块</p><p>作用：对类进行一些初始化  只加载一次，当new多个对象时，只有第一次会调用静态代码块，因为，静态代码块是属于类的，所有对象共享一份</p><p>调用: new 一个对象时自动调用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 静态代码块 &#123;</span></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    C c1 = <span class="keyword">new</span> C();</span><br><span class="line">    C c2 = <span class="keyword">new</span> C();</span><br><span class="line">    <span class="comment">//结果,静态代码块只会调用一次，类的所有对象共享该代码块</span></span><br><span class="line">    <span class="comment">//一般用于类的全局信息初始化</span></span><br><span class="line">    <span class="comment">//静态代码块调用</span></span><br><span class="line">    <span class="comment">//代码块调用</span></span><br><span class="line">    <span class="comment">//构造方法调用</span></span><br><span class="line">    <span class="comment">//代码块调用</span></span><br><span class="line">    <span class="comment">//构造方法调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>&#123;</span></span><br><span class="line">    C()&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造方法调用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"代码块调用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块调用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java代码块、构造方法（包含继承关系）的执行顺序"><a href="#Java代码块、构造方法（包含继承关系）的执行顺序" class="headerlink" title="Java代码块、构造方法（包含继承关系）的执行顺序"></a>Java代码块、构造方法（包含继承关系）的执行顺序</h1><p>这是一道常见的面试题，要回答这个问题，先看看这个实例吧。</p><p>一共3个类：A、B、C 其中A是B的父类，C无继承仅作为输出</p><p>A类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Log.i(<span class="string">"HIDETAG"</span>, <span class="string">"A静态代码块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> C c = <span class="keyword">new</span> C(<span class="string">"A静态成员"</span>);</span><br><span class="line"><span class="keyword">private</span>  C c1 = <span class="keyword">new</span> C(<span class="string">"A成员"</span>);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    Log.i(<span class="string">"HIDETAG"</span>, <span class="string">"A代码块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Log.i(<span class="string">"HIDETAG"</span>, <span class="string">"A静态代码块2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="string">"HIDETAG"</span>, <span class="string">"A构造方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="title">extends</span> <span class="title">A</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> C c1 = <span class="keyword">new</span> C(<span class="string">"B静态成员"</span>);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    Log.i(<span class="string">"HIDETAG"</span>, <span class="string">"B代码块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> C c = <span class="keyword">new</span> C(<span class="string">"B成员"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Log.i(<span class="string">"HIDETAG"</span>, <span class="string">"B静态代码块2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Log.i(<span class="string">"HIDETAG"</span>, <span class="string">"B静态代码块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="string">"HIDETAG"</span>, <span class="string">"B构造方法"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">C</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="string">"HIDETAG"</span>, str + <span class="string">"构造方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行语句：new B();</p><p>输出结果如下：</p><p>I/HIDETAG: A静态代码块<br> I/HIDETAG: A静态成员构造方法<br> I/HIDETAG: A静态代码块2<br> I/HIDETAG: B静态成员构造方法<br> I/HIDETAG: B静态代码块2<br> I/HIDETAG: B静态代码块<br> I/HIDETAG: A成员构造方法<br> I/HIDETAG: A代码块<br> I/HIDETAG: A构造方法<br> I/HIDETAG: B代码块<br> I/HIDETAG: B成员构造方法<br> I/HIDETAG: B构造方法</p><p>得出结论：<br>执行顺序依次为：<br>父类的静态成员和代码块<br>子类静态成员和代码块<br>父类成员初始化和代码快<br>父类构造方法<br>子类成员初始化和代码块<br>子类构造方法<br>注意：可以发现，同一级别的代码块和成员初始化是按照代码顺序从上到下依次执行</p><p>看完上面这个demo，再来看看下面这道题，看看你搞得定吗？</p><p>看下面一段代码，求执行顺序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1A类的构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"2A类的构造快"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"3A类的静态块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="title">extends</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"4B类的构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"5B类的构造快"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"6B类的静态块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"7"</span>);</span><br><span class="line">        <span class="keyword">new</span> B();</span><br><span class="line">        <span class="keyword">new</span> B();</span><br><span class="line">        System.out.println(<span class="string">"8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行顺序结果为：367215421548</p><p>为什么呢？</p><p>首先我们要知道下面这5点：</p><p>每次new都会执行构造方法以及构造块。构造块的内容会在构造方法之前执行。非主类的静态块会在类加载时，构造方法和构造块之前执行，切只执行一次。主类（public class）里的静态块会先于main执行。继承中，子类实例化，会先执行父类的构造方法，产生父类对象，再调用子类构造方法。所以题目里，由于主类B继承A，所以会先加载A，所以第一个执行的是第3句。</p><p>从第4点我们知道6会在7之前执行，所以前三句是367。</p><p>之后实例化了B两次，每次都会先实例化他的父类A，然后再实例化B，而根据第1、2、5点，知道顺序为2154。</p><p>最后执行8</p><p>所以顺序是367215421548</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我在一个公众号上看到的关于java基础的一些内容，我觉得对于java基础掌握不牢固的小伙伴的帮助应该会很大，所以搬运过来供大家学习交流。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java基础" scheme="https://youngyang.top/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="代码块执行顺序" scheme="https://youngyang.top/tags/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>夯实Java基础系列：深入理解Java内部类及其实现原理</title>
    <link href="https://youngyang.top/2019/04/22/%E5%A4%AF%E5%AE%9EJava%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%EF%BC%9A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E5%86%85%E9%83%A8%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://youngyang.top/2019/04/22/夯实Java基础系列：深入理解Java内部类及其实现原理/</id>
    <published>2019-04-22T06:47:40.000Z</published>
    <updated>2019-10-31T04:36:16.655Z</updated>
    
    <content type="html"><![CDATA[<p>这是我在一个公众号上看到的关于java基础的一些内容，我觉得对于java基础掌握不牢固的小伙伴的帮助应该会很大，所以搬运过来供大家学习交流。</p><a id="more"></a><p><strong>原创公众号:java技术江湖</strong></p><h2 id="内部类初探"><a href="#内部类初探" class="headerlink" title="内部类初探"></a>内部类初探</h2><p>内部类是指在一个外部类的内部再定义一个类。内部类作为外部类的一个成员，并且依附于外部类而存在的。内部类可为静态，可用protected和private修饰（而外部类只能使用public和缺省的包访问权限）。内部类主要有以下几类：成员内部类、局部内部类、静态内部类、匿名内部类</p><h2 id="内部类的共性"><a href="#内部类的共性" class="headerlink" title="内部类的共性"></a>内部类的共性</h2><p>(1)内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号 。</p><p>(2)内部类不能用普通的方式访问。</p><p>(3)内部类声明成静态的，就不能随便的访问外部类的成员变量了，此时内部类只能访问外部类的静态成员变量 。</p><p>(4)外部类不能直接访问内部类的的成员，但可以通过内部类对象来访问</p><p>内部类是外部类的一个成员，因此内部类可以自由地访问外部类的成员变量，无论是否是private的。<br>因为当某个外围类的对象创建内部类的对象时，此内部类会捕获一个隐式引用，它引用了实例化该内部对象的外围类对象。通过这个指针，可以访问外围类对象的全部状态。<br>通过反编译内部类的字节码，分析之后主要是通过以下几步做到的：<br>1 编译器自动为内部类添加一个成员变量， 这个成员变量的类型和外部类的类型相同， 这个成员变量就是指向外部类对象的引用；<br>2 编译器自动为内部类的构造方法添加一个参数， 参数的类型是外部类的类型， 在构造方法内部使用这个参数为1中添加的成员变量赋值；<br>3 在调用内部类的构造函数初始化内部类对象时， 会默认传入外部类的引用。</p><h2 id="使用内部类的好处："><a href="#使用内部类的好处：" class="headerlink" title="使用内部类的好处："></a>使用内部类的好处：</h2><p>静态内部类的作用：<br>1 只是为了降低包的深度，方便类的使用，静态内部类适用于包含类当中，但又不依赖与外在的类。</p><p>2 由于Java规定静态内部类不能用使用外在类的非静态属性和方法，所以只是为了方便管理类结构而定义。于是我们在创建静态内部类的时候，不需要外部类对象的引用。<br>非静态内部类的作用：<br>1 内部类继承自某个类或实现某个接口，内部类的代码操作创建其他外围类的对象。所以你可以认为内部类提供了某种进入其外围类的窗口。</p><p>2 使用内部类最吸引人的原因是:每个内部类都能独立地继承自一个(接口的)实现，所以无论外围类是否已经继承了某个(接口的)实现，对于内部类都没有影响<br>3 如果没有内部类提供的可以继承多个具体的或抽象的类的能力，一些设计与编程问题就很难解决。从这个角度看，内部类使得多重继承的解决方案变得完整。接口解决了部分问题，而内部类有效地实现了”多重继承”。</p><h2 id="那静态内部类与普通内部类有什么区别呢？"><a href="#那静态内部类与普通内部类有什么区别呢？" class="headerlink" title="那静态内部类与普通内部类有什么区别呢？"></a>那静态内部类与普通内部类有什么区别呢？</h2><p>问得好，区别如下：</p><p>（1）静态内部类不持有外部类的引用 在普通内部类中，我们可以直接访问外部类的属性、方法，即使是private类型也可以访问，这是因为内部类持有一个外部类的引用，可以自由访问。而静态内部类，则只可以访问外部类的静态方法和静态属性（如果是private权限也能访问，这是由其代码位置所决定的），其他则不能访问。</p><p>（2）静态内部类不依赖外部类 普通内部类与外部类之间是相互依赖的关系，内部类实例不能脱离外部类实例，也就是说它们会同生同死，一起声明，一起被垃圾回收器回收。而静态内部类是可以独立存在的，即使外部类消亡了，静态内部类还是可以存在的。</p><p>（3）普通内部类不能声明static的方法和变量 普通内部类不能声明static的方法和变量，注意这里说的是变量，常量（也就是final static修饰的属性）还是可以的，而静态内部类形似外部类，没有任何限制。</p><h2 id="为什么普通内部类不能有静态变量呢？"><a href="#为什么普通内部类不能有静态变量呢？" class="headerlink" title="为什么普通内部类不能有静态变量呢？"></a>为什么普通内部类不能有静态变量呢？</h2><p>1 成员内部类 之所以叫做成员 就是说他是类实例的一部分 而不是类的一部分<br>2 结构上来说 他和你声明的成员变量是一样的地位 一个特殊的成员变量 而静态的变量是类的一部分和实例无关<br>3 你若声明一个成员内部类 让他成为主类的实例一部分 然后又想在内部类声明和实例无关的静态的东西 你让JVM情何以堪啊<br>4 若想在内部类内声明静态字段 就必须将其内部类本身声明为静态<br>非静态内部类有一个很大的优点：可以自由使用外部类的所有变量和方法</p><p>下面的例子大概地介绍了</p><p>1 非静态内部类和静态内部类的区别。</p><p>2 不同访问权限的内部类的使用。</p><p>3 外部类和它的内部类之间的关系</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本节讨论内部类以及不同访问权限的控制</span></span><br><span class="line"><span class="comment">//内部类只有在使用时才会被加载。</span></span><br><span class="line"><span class="comment">//外部类B</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> s = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ss = <span class="number">1</span>;</span><br><span class="line">    A a;</span><br><span class="line">    AA aa;</span><br><span class="line">    AAA aaa;</span><br><span class="line">    <span class="comment">//内部类A</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="comment">//        static void go () &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        static &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//      static int b = 1;//非静态内部类不能有静态成员变量和静态代码块和静态方法，</span></span><br><span class="line">        <span class="comment">// 因为内部类在外部类加载时并不会被加载和初始化。</span></span><br><span class="line">        <span class="comment">//所以不会进行静态代码的调用</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span>;<span class="comment">//外部类无法读取内部类的成员，而内部类可以直接访问外部类成员</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(j);</span><br><span class="line">            j = <span class="number">2</span>;</span><br><span class="line">            System.out.println(j);</span><br><span class="line">            System.out.println(s);<span class="comment">//可以访问类的静态成员变量</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            AA aa = <span class="keyword">new</span> AA();</span><br><span class="line">            AAA aaa = <span class="keyword">new</span> AAA();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态内部类S，可以被外部访问</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">S</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;<span class="comment">//访问不到非静态变量。</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> s = <span class="number">0</span>;<span class="comment">//可以有静态变量</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        @Test</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//            System.out.println(j);//报错，静态内部类不能读取外部类的非静态变量</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">            System.out.println(ss);</span><br><span class="line">            s = <span class="number">2</span>;</span><br><span class="line">            ss = <span class="number">2</span>;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            System.out.println(ss);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内部类AA，其实这里加protected相当于default</span></span><br><span class="line">    <span class="comment">//因为外部类要调用内部类只能通过B。并且无法直接继承AA，所以必须在同包</span></span><br><span class="line">    <span class="comment">//的类中才能调用到(这里不考虑静态内部类)，那么就和default一样了。</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">AA</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span>;<span class="comment">//内部类之间不共享变量</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span></span>&#123;</span><br><span class="line">            A a = <span class="keyword">new</span> A();</span><br><span class="line">            AAA aaa = <span class="keyword">new</span> AAA();</span><br><span class="line">            <span class="comment">//内部类之间可以互相访问。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//包外部依然无法访问，因为包没有继承关系，所以找不到这个类</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SS</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span>;<span class="comment">//内部类之间不共享变量</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//内部类之间可以互相访问。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//私有内部类A，对外不可见，但对内部类和父类可见</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">AAA</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span>;<span class="comment">//内部类之间不共享变量</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            A a = <span class="keyword">new</span> A();</span><br><span class="line">            AA aa = <span class="keyword">new</span> AA();</span><br><span class="line">            <span class="comment">//内部类之间可以互相访问。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        a.test();</span><br><span class="line">        <span class="comment">//内部类可以修改外部类的成员变量</span></span><br><span class="line">        <span class="comment">//打印出 1 2</span></span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一个外部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先，其他类内部类只能通过外部类来获取其实例。</span></span><br><span class="line">        B.S s = <span class="keyword">new</span> B.S();</span><br><span class="line">        <span class="comment">//静态内部类可以直接通过B类直接获取，不需要B的实例，和静态成员变量类似。</span></span><br><span class="line">        <span class="comment">//B.A a = new B.A();</span></span><br><span class="line">        <span class="comment">//当A不是静态类时这行代码会报错。</span></span><br><span class="line">        <span class="comment">//需要使用B的实例来获取A的实例</span></span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        B.A a = b.<span class="keyword">new</span> A();</span><br><span class="line">        B.AA aa = b.<span class="keyword">new</span> AA();<span class="comment">//B和C同包，所以可以访问到AA</span></span><br><span class="line"><span class="comment">//      B.AAA aaa = b.new AAA();AAA为私有内部类，外部类不可见</span></span><br><span class="line">        <span class="comment">//当A使用private修饰时，使用B的实例也无法获取A的实例，这一点和私有变量是一样的。</span></span><br><span class="line">        <span class="comment">//所有普通的内部类与类中的一个变量是类似的。静态内部类则与静态成员类似。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类的加载"><a href="#内部类的加载" class="headerlink" title="内部类的加载"></a>内部类的加载</h2><p>可能刚才的例子中没办法直观地看到内部类是如何加载的，接下来用例子展示一下内部类加载的过程。</p><p>1 内部类是延时加载的，也就是说只会在第一次使用时加载。不使用就不加载，所以可以很好的实现单例模式。</p><p>2 不论是静态内部类还是非静态内部类都是在第一次使用时才会被加载。</p><p>3 对于非静态内部类是不能出现静态模块（包含静态块，静态属性，静态方法等）</p><p>4 非静态类的使用需要依赖于外部类的对象，详见上述对象innerClass 的初始化。<br>简单来说，类的加载都是发生在类要被用到的时候。内部类也是一样</p><p>1 普通内部类在第一次用到时加载，并且每次实例化时都会执行内部成员变量的初始化，以及代码块和构造方法。<br>2 静态内部类也是在第一次用到时被加载。但是当它加载完以后就会将静态成员变量初始化，运行静态代码块，并且只执行一次。当然，非静态成员和代码块每次实例化时也会执行。<br>总结一下Java类代码加载的顺序，万变不离其宗。</p><p>规律一、初始化构造时，先父后子；只有在父类所有都构造完后子类才被初始化</p><p>规律二、类加载先是静态、后非静态、最后是构造函数。</p><p>静态构造块、静态类属性按出现在类定义里面的先后顺序初始化，同理非静态的也是一样的，只是静态的只在加载字节码时执行一次，不管你new多少次，非静态会在new多少次就执行多少次</p><p>规律三、java中的类只有在被用到的时候才会被加载</p><p>规律四、java类只有在类字节码被加载后才可以被构造成对象实例</p><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>在方法中定义的内部类称为局部内部类。与局部变量类似，局部内部类不能有访问说明符，因为它不是外围类的一部分，但是它可以访问当前代码块内的常量，和此外围类所有的成员。</p><p>需要注意的是：局部内部类只能在定义该内部类的方法内实例化，不可以在此方法外对其实例化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 局部内部类 &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span><span class="comment">//局部内部类就是写在方法里的类，只在方法执行时加载，一次性使用。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        final <span class="keyword">int</span> j = <span class="number">2</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">            @Test</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                System.out.println(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//static class A报错，方法里不能定义静态内部类。</span></span><br><span class="line">            <span class="comment">//因为只有在方法调用时才能进行类加载和初始化。</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>简单地说：匿名内部类就是没有名字的内部类，并且，匿名内部类是局部内部类的一种特殊形式。什么情况下需要使用匿名内部类？如果满足下面的一些条件，使用匿名内部类是比较合适的：只用到类的一个实例。类在定义后马上用到。类非常小（SUN推荐是在4行代码以下） 给类命名并不会导致你的代码更容易被理解。在使用匿名内部类时，要记住以下几个原则：</p><p>1 　匿名内部类不能有构造方法。</p><p>2 　匿名内部类不能定义任何静态成员、方法和类。</p><p>3 　匿名内部类不能是public,protected,private,static。</p><p>4 　只能创建匿名内部类的一个实例。</p><p>5 一个匿名内部类一定是在new的后面，用其隐含实现一个接口或实现一个类。</p><p>6 　因匿名内部类为局部内部类，所以局部内部类的所有限制都对其生效。<br>一个匿名内部类的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 匿名内部类 &#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">interface D&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span> <span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">E</span>&#123;</span></span><br><span class="line">    E ()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">abstract <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"></span><br><span class="line">        @Test</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//利用接口写出一个实现该接口的类的实例。</span></span><br><span class="line">            <span class="comment">//有且仅有一个实例，这个类无法重用。</span></span><br><span class="line">            <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line"><span class="comment">//                    k = 1;报错，当外部方法中的局部变量在内部类使用中必须改为final类型。</span></span><br><span class="line">                    <span class="comment">//因为方外部法中即使改变了这个变量也不会反映到内部类中。</span></span><br><span class="line">                    <span class="comment">//所以对于内部类来讲这只是一个常量。</span></span><br><span class="line">                    System.out.println(<span class="number">100</span>);</span><br><span class="line">                    System.out.println(k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">new</span> D()&#123;</span><br><span class="line">                <span class="comment">//实现接口的匿名类</span></span><br><span class="line">                <span class="keyword">int</span> i =<span class="number">1</span>;</span><br><span class="line">                @Override</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"run"</span>);</span><br><span class="line">                    System.out.println(i);</span><br><span class="line">                    System.out.println(k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.run();</span><br><span class="line">            <span class="keyword">new</span> E()&#123;</span><br><span class="line">                <span class="comment">//继承抽象类的匿名类</span></span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">                <span class="function"><span class="keyword">void</span> <span class="title">run</span> <span class="params">(<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">                    j = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名内部类里的final"><a href="#匿名内部类里的final" class="headerlink" title="匿名内部类里的final"></a>匿名内部类里的final</h2><p>使用的形参为何要为final</p><p>参考文件：<a href="http://android.blog.51cto.com/268543/384844" target="_blank" rel="noopener">http://android.blog.51cto.com/268543/384844</a></p><p>我们给匿名内部类传递参数的时候，若该形参在内部类中需要被使用，那么该形参必须要为final。也就是说：当所在的方法的形参需要被内部类里面使用时，该形参必须为final。</p><p>为什么必须要为final呢？</p><p>首先我们知道在内部类编译成功后，它会产生一个class文件，该class文件与外部类并不是同一class文件，仅仅只保留对外部类的引用。当外部类传入的参数需要被内部类调用时，从java程序的角度来看是直接被调用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(final String name,String age)</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span>&#123;</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中看好像name参数应该是被内部类直接调用？其实不然，在java编译之后实际的操作如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span>$<span class="title">InnerClass</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InnerClass</span><span class="params">(String name,String age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.InnerClass$name = name;</span><br><span class="line">        <span class="keyword">this</span>.InnerClass$age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.InnerClass$name + <span class="string">"----"</span> + <span class="keyword">this</span>.InnerClass$age );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以从上面代码来看，内部类并不是直接调用方法传递的参数，而是利用自身的构造器对传入的参数进行备份，自己内部方法调用的实际上时自己的属性而不是外部方法传递进来的参数。</p><p>直到这里还没有解释为什么是final<br>在内部类中的属性和外部方法的参数两者从外表上看是同一个东西，但实际上却不是，所以他们两者是可以任意变化的，也就是说在内部类中我对属性的改变并不会影响到外部的形参，而然这从程序员的角度来看这是不可行的。</p><p>毕竟站在程序的角度来看这两个根本就是同一个，如果内部类该变了，而外部方法的形参却没有改变这是难以理解和不可接受的，所以为了保持参数的一致性，就规定使用final来避免形参的不改变。<br>简单理解就是，拷贝引用，为了避免引用值发生改变，例如被外部类的方法修改等，而导致内部类得到的值不一致，于是用final来让该引用不可改变。</p><p>故如果定义了一个匿名内部类，并且希望它使用一个其外部定义的参数，那么编译器会要求该参数引用是final的。</p><h2 id="内部类初始化"><a href="#内部类初始化" class="headerlink" title="内部类初始化"></a>内部类初始化</h2><p>我们一般都是利用构造器来完成某个实例的初始化工作的，但是匿名内部类是没有构造器的！那怎么来初始化匿名内部类呢？使用构造代码块！利用构造代码块能够达到为匿名内部类创建一个构造器的效果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutClass</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InnerClass <span class="title">getInnerClass</span><span class="params">(final <span class="keyword">int</span> age,final String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InnerClass() &#123;</span><br><span class="line">            <span class="keyword">int</span> age_ ;</span><br><span class="line">            String name_;</span><br><span class="line">            <span class="comment">//构造代码块完成初始化工作</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">0</span> &lt; age &amp;&amp; age &lt; <span class="number">200</span>)&#123;</span><br><span class="line">                    age_ = age;</span><br><span class="line">                    name_ = name;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> name_;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> age_;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="内部类的重载"><a href="#内部类的重载" class="headerlink" title="内部类的重载"></a>内部类的重载</h2><p>如果你创建了一个内部类，然后继承其外围类并重新定义此内部类时，会发生什么呢？也就是说，内部类可以被重载吗？这看起来似乎是个很有用的点子，但是“重载”内部类就好像它是外围类的一个方法，其实并不起什么作用：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Egg</span> &#123;</span></span><br><span class="line">       <span class="keyword">private</span> Yolk y;</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Yolk</span> &#123;</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="title">Yolk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                     System.out.println(<span class="string">"Egg.Yolk()"</span>);</span><br><span class="line">              &#125;</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Egg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              System.out.println(<span class="string">"New Egg()"</span>);</span><br><span class="line">              y = <span class="keyword">new</span> Yolk();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigEgg</span> <span class="title">extends</span> <span class="title">Egg</span> &#123;</span></span><br><span class="line">       <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yolk</span> &#123;</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="title">Yolk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                     System.out.println(<span class="string">"BigEgg.Yolk()"</span>);</span><br><span class="line">              &#125;</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">new</span> BigEgg();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br><span class="line">输出结果为：</span><br><span class="line"><span class="function">New <span class="title">Egg</span><span class="params">()</span></span></span><br><span class="line">Egg.Yolk()</span><br></pre></td></tr></table></figure><p>缺省的构造器是编译器自动生成的，这里是调用基类的缺省构造器。你可能认为既然创建了BigEgg 的对象，那么所使用的应该是被“重载”过的Yolk，但你可以从输出中看到实际情况并不是这样的。这个例子说明，当你继承了某个外围类的时候，内部类并没有发生什么特别神奇的变化。这两个内部类是完全独立的两个实体，各自在自己的命名空间内。</p><h2 id="内部类的继承"><a href="#内部类的继承" class="headerlink" title="内部类的继承"></a>内部类的继承</h2><p>因为内部类的构造器要用到其外围类对象的引用，所以在你继承一个内部类的时候，事情变得有点复杂。问题在于，那个“秘密的”外围类对象的引用必须被初始化，而在被继承的类中并不存在要联接的缺省对象。要解决这个问题，需使用专门的语法来明确说清它们之间的关联：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithInner</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> &#123;</span></span><br><span class="line">                Inner()&#123;</span><br><span class="line">                        System.out.println(<span class="string">"this is a constructor in WithInner.Inner"</span>);</span><br><span class="line">                &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritInner</span> <span class="title">extends</span> <span class="title">WithInner</span>.<span class="title">Inner</span> &#123;</span></span><br><span class="line">        <span class="comment">// ! InheritInner() &#123;&#125; // Won't compile</span></span><br><span class="line">        InheritInner(WithInner wi) &#123;</span><br><span class="line">                wi.super();</span><br><span class="line">                System.out.println(<span class="string">"this is a constructor in InheritInner"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                WithInner wi = <span class="keyword">new</span> WithInner();</span><br><span class="line">                InheritInner ii = <span class="keyword">new</span> InheritInner(wi);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制代码 输出结果为：this is a constructor in WithInner.Inner this is a constructor in InheritInner</p><p>可以看到，InheritInner 只继承自内部类，而不是外围类。但是当要生成一个构造器时，缺省的构造器并不算好，而且你不能只是传递一个指向外围类对象的引用。此外，你必须在构造器内使用如下语法：enclosingClassReference.super(); 这样才提供了必要的引用，然后程序才能编译通过。</p><p>有关匿名内部类实现回调，事件驱动，委托等机制的文章将在下一节讲述。</p><h2 id="Java内部类的实现原理"><a href="#Java内部类的实现原理" class="headerlink" title="Java内部类的实现原理"></a>Java内部类的实现原理</h2><p>内部类为什么能够访问外部类的成员？</p><p>定义内部类如下：<br><img src="https://img-blog.csdnimg.cn/20191027195411173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用javap命令进行反编译。</p><p>编译后得到Main.class Main$Inner.class两个文件，反编译Main$Inner.class文件如下：</p><p>可以看到，内部类其实拥有外部类的一个引用，在构造函数中将外部类的引用传递进来。</p><p>匿名内部类为什么只能访问局部的final变量？</p><p>其实可以这样想，当方法执行完毕后，局部变量的生命周期就结束了，而局部内部类对象的生命周期可能还没有结束，那么在局部内部类中访问局部变量就不可能了，所以将局部变量改为final，改变其生命周期。</p><p>编写代码如下：<br>这段代码编译为Main.class Main$1.class两个文件，反编译Main$1.class文件如下：可以看到，java将编译时已经确定的值直接复制，进行替换，将无法确定的值放到了内部类的常量池中，并在构造函数中将其从常量池取出到字段中。</p><p>可以看出，java将局部变量m直接进行复制，所以其并不是原来的值，若在内部类中将m更改，局部变量的m值不会变，就会出现数据不一致，所以java就将其限制为final，使其不能进行更改，这样数据不一致的问题就解决了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我在一个公众号上看到的关于java基础的一些内容，我觉得对于java基础掌握不牢固的小伙伴的帮助应该会很大，所以搬运过来供大家学习交流。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java基础" scheme="https://youngyang.top/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="实现原理" scheme="https://youngyang.top/categories/java%E5%9F%BA%E7%A1%80/%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Java基础" scheme="https://youngyang.top/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="内部类" scheme="https://youngyang.top/tags/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>如何实现http协议中的重定向？</title>
    <link href="https://youngyang.top/2019/04/22/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0HTTP%E5%8D%8F%E8%AE%AE%E4%B8%AD%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>https://youngyang.top/2019/04/22/如何实现HTTP协议中重定向/</id>
    <published>2019-04-22T06:47:40.000Z</published>
    <updated>2019-10-31T04:32:39.393Z</updated>
    
    <content type="html"><![CDATA[<p>我是一个新的java学习爱好者，业余的时候写一些简单的技术博客供大家一起学习交流，欢迎大家互相学习，共同进步。如果有什么不正确或者有什么建议欢迎指教！！</p><a id="more"></a><p>在学java web的时候遇到一个重定向的问题。</p><p>首先讲解下什么是重定向：在 HTTP 协议中，重定向操作由服务器通过发送特殊的响应（即 redirects）而触发。HTTP 协议的重定向响应的状态码为 3xx 。浏览器在接收到重定向响应的时候，会采用该响应提供的新的 URL ，并立即进行加载；大多数情况下，除了会有一小部分性能损失之外，重定向操作对于用户来说是不可见的。</p><p>简单的说就是：客户端向服务器发送请求，但是服务器的某个资源完成不了这个请求，让客户端去请求另一个资源来完成请求。就是一个请求转发的过程。</p><p>我是采用IntelliJ IDEA来完成的，首先先new两个Servlet，在这里实现httpServlet，起名responseDemo1和responseDemo2。</p><pre><code>其实重定向有两种方式：第一种：</code></pre><p> 1、设置状态码为302：response.setStatus(302);<br> 2、设置响应头的location，设置请求资源路径 response.setHeader(“location”,”资源路径”);<br>   第二种 ：<br>   直接调用response.sendRedirect(“资源路径”)</p><pre><code>第一个Servlet代码如下：`package cn.itcast.servlet;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet(&quot;/responseDemo1&quot;)public class responseDemo1 extends HttpServlet {protected void doPost(HttpServletRequest request, HttpServletResponse response) throws         ServletException, IOException {    System.out.println(request.getMethod());    System.out.println(&quot;responseDemo1.....&quot;);   /* //设置状态码302    response.setStatus(302);    //设置资源路径    response.setHeader(&quot;location&quot;, &quot;/day15/responseDemo2&quot;);*/   response.sendRedirect(&quot;/day15/responseDemo2&quot;);}protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {    this.doPost(request,response);}</code></pre><p>}<br>`<br>    第二个如下：</p><pre><code>`    package cn.itcast.servlet;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet(&quot;/responseDemo2&quot;)public class responseDemo2 extends HttpServlet {protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {    System.out.println(request.getMethod());    System.out.println(&quot;responseDemo2.......&quot;);} protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {    this.doPost(request,response);}</code></pre><p>}<br>`</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是一个新的java学习爱好者，业余的时候写一些简单的技术博客供大家一起学习交流，欢迎大家互相学习，共同进步。如果有什么不正确或者有什么建议欢迎指教！！&lt;/p&gt;
    
    </summary>
    
    
      <category term="java web" scheme="https://youngyang.top/categories/java-web/"/>
    
    
      <category term="重定向" scheme="https://youngyang.top/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
      <category term="实现原理" scheme="https://youngyang.top/tags/%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>如何在Linux中安装MySQL数据库</title>
    <link href="https://youngyang.top/2019/04/22/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%AD%E5%AE%89%E8%A3%85MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://youngyang.top/2019/04/22/如何在Linux中安装MySQL数据库/</id>
    <published>2019-04-22T06:47:40.000Z</published>
    <updated>2019-10-31T04:33:02.595Z</updated>
    
    <content type="html"><![CDATA[<p>最近在阿里云买了一个云服务器，centos 7.3。打算把自己写的项目部署进去来玩一玩，熟悉线上部署的流程。部署项目之前肯定要搭建好环境，比如jdk、tomcat、maven、mysql等等的安装。因为之前没有用过linux系统，对其中的原理和各种命令不尽熟悉，所以遇到了许多困难。</p><a id="more"></a><p>说出来大家可能不信，光是装mysql就装了两天 ，装上之后各种报错。不是不能启动mysql，就是启动了mysql service但是由于本地mysql.sock找不到不能连接，反正是心力交瘁。来来回回装了好几遍，找各种原因，各种解决方案，但是不管怎么样，总算是装好了，并且在装的过程中也学到了很多东西。<br>那我就来说下装成功的过程，希望接下来我的博客能帮助到大家，互相学习。</p><h1 id="一-安装wget"><a href="#一-安装wget" class="headerlink" title="一.安装wget."></a>一.安装wget.</h1><p>wget命令用来从指定的URL下载文件,wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。<br>如果虚拟机中未安装wget，则：<br>输入命令<code>yum -y install wget</code><br><em>其中：命令后面加上 -y 后，当执行该命令后，出现 需要选择确认或取消的时候，（即选择y/n的时候），自动选择y</em></p><h1 id="二-在MySQL官网下载MySQL仓库"><a href="#二-在MySQL官网下载MySQL仓库" class="headerlink" title="二.在MySQL官网下载MySQL仓库"></a>二.在MySQL官网下载MySQL仓库</h1><p>我使用的是阿里云服务器中的centos7.3，这里提供一个仓库链接：<br>1.<a href="https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm" target="_blank" rel="noopener">Red Hat Enterprise Linux 7 / Oracle Linux 7 (Architecture Independent), RPM Package.7版本的</a></p><p>2.<a href="https://dev.mysql.com/get/mysql80-community-release-el6-1.noarch.rpm" target="_blank" rel="noopener">Red Hat Enterprise Linux 6 / Oracle Linux 6 (Architecture Independent), RPM Package.6版本的</a></p><p>如果想要其他版本，比如Windows、Ubuntu、Macos，也可以去mysql官网进行不同系统不同版本的下载或者复制响应的链接。<br>可以来到如下页面：<br><img src="https://img-blog.csdnimg.cn/20191023202601505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191023202736366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191023202844815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="三-开始下载MySQL仓库"><a href="#三-开始下载MySQL仓库" class="headerlink" title="三.开始下载MySQL仓库"></a>三.开始下载MySQL仓库</h1><p>进入下载的目标目录（我是下载到/download/目录）<br><img src="https://img-blog.csdnimg.cn/20191023203145610.png" alt="在这里插入图片描述"></p><h5 id="1-使用wget进行下载"><a href="#1-使用wget进行下载" class="headerlink" title="1.使用wget进行下载"></a>1.使用wget进行下载</h5><p>使用命令# <code>wget  https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</code><br>下载成功后就可以在/download/目录下看到该文件。<br><img src="https://img-blog.csdnimg.cn/20191023203332908.png" alt="在这里插入图片描述"></p><h5 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h5><p>使用命令#  <code>rpm -Uvh mysql80-community-release-el7-1.noarch.rpm</code> </p><h5 id="3-接下来就可以正式安装mysql了"><a href="#3-接下来就可以正式安装mysql了" class="headerlink" title="3.接下来就可以正式安装mysql了"></a>3.接下来就可以正式安装mysql了</h5><p>默认安装的是8.0版本的，我在这里演示一下5.7版本，如果需要的就是8.0版本可以直接跳过。<br>修改文件 <code>vim  /etc/yum.repos.d/mysql-community.repo</code><br>找到这里有一个8.0，有一个人5.7，用哪一个就把它的enabled修改为1,<br>这里我用的是5.7的，所以把5.7的enabled=1,把8.0的enable。<br><img src="https://img-blog.csdnimg.cn/20191023203819117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDEzNTkw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改好保存退出<br>然后执行<code>yum -y install mysql-community-server</code>进行正式安装。</p><h1 id="四-修改mysql的密码"><a href="#四-修改mysql的密码" class="headerlink" title="四.修改mysql的密码"></a>四.修改mysql的密码</h1><p>执行完毕上述步骤，MySQL就算安装完成，但是需要尽快在7天之内修改默认密码，mysql初始登录需要修改密码。</p><h5 id="1-重置密码的第一步就是跳过MySQL的密码认证过程"><a href="#1-重置密码的第一步就是跳过MySQL的密码认证过程" class="headerlink" title="1.重置密码的第一步就是跳过MySQL的密码认证过程"></a>1.重置密码的第一步就是跳过MySQL的密码认证过程</h5><p>方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vim /etc/my.cnf(注：windows下修改的是my.ini)</span></span><br></pre></td></tr></table></figure><p>在文档内搜索mysqld定位到[mysqld]文本段：<br>/mysqld(在vim编辑状态下直接输入该命令可搜索文本内容)</p><p>在[mysqld]后面任意一行<code>skip-grant-tables</code>用来跳过密码验证的过程，如下图所示：<br>在这里插入图片描述<br><img src="https://img-blog.csdnimg.cn/20191023210015640.png" alt="在这里插入图片描述"><br>保存文档并退出：<code>:wq</code></p><h5 id="2-接下来我们需要重启MySQL："><a href="#2-接下来我们需要重启MySQL：" class="headerlink" title="2.接下来我们需要重启MySQL："></a>2.接下来我们需要重启MySQL：</h5><p>使用如下命令操作mysql：<br>systemctl start mysqld.service 启动<br>systemctl stop mysqld.service 停止<br>systemctl restart mysqld.service 重启</p><h5 id="3-重启之后输入mysql即可进入mysql"><a href="#3-重启之后输入mysql即可进入mysql" class="headerlink" title="3.重启之后输入mysql即可进入mysql"></a>3.重启之后输入<code>mysql</code>即可进入mysql</h5><h5 id="4-进行密码重置"><a href="#4-进行密码重置" class="headerlink" title="4.进行密码重置"></a>4.进行密码重置</h5><p>虽然已经走到了安装mysql的最后一步，但是因为第一次使用linux系统和在linux系统中安装mysql，所以遇到了很多问题。<br>1.使用mysql数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure><p>2.更新user表中的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user <span class="built_in">set</span> password=password(<span class="string">'root'</span>) <span class="built_in">where</span> user=<span class="string">'root'</span> and host=<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><p>在使用上述sql语句之后会报错<br><img src="https://img-blog.csdnimg.cn/2019102322360746.png" alt="在这里插入图片描述"><br>这是因为在/etc/my.cnf文件中加入了<code>skip-grant-tables</code>，所以user表删除了password列，若想修改password列的值，要使用authentication_string代替password<br>即：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user <span class="built_in">set</span> authentication_string=password(<span class="string">"root"</span>) <span class="built_in">where</span> user=<span class="string">'root'</span> and host=<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191023223824345.png" alt="在这里插入图片描述"><br>至此，安装mysql所有步骤全部完成！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在阿里云买了一个云服务器，centos 7.3。打算把自己写的项目部署进去来玩一玩，熟悉线上部署的流程。部署项目之前肯定要搭建好环境，比如jdk、tomcat、maven、mysql等等的安装。因为之前没有用过linux系统，对其中的原理和各种命令不尽熟悉，所以遇到了许多困难。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://youngyang.top/categories/Linux/"/>
    
    
      <category term="mysql" scheme="https://youngyang.top/tags/mysql/"/>
    
      <category term="Linux" scheme="https://youngyang.top/tags/Linux/"/>
    
      <category term="服务器" scheme="https://youngyang.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
</feed>
